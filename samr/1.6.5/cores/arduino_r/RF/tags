!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AT86RF212B_PARTNUM	RF-registers.h	36;"	d
AT86RF231_PARTNUM	RF-registers.h	37;"	d
AT86RF232_PARTNUM	RF-registers.h	38;"	d
AT86RF233_PARTNUM	RF-registers.h	39;"	d
IEEE802154_FCF_ACK_REQ	ieee802154.h	44;"	d
IEEE802154_FCF_DST_ADDR_LONG	ieee802154.h	50;"	d
IEEE802154_FCF_DST_ADDR_MASK	ieee802154.h	47;"	d
IEEE802154_FCF_DST_ADDR_SHORT	ieee802154.h	49;"	d
IEEE802154_FCF_DST_ADDR_VOID	ieee802154.h	48;"	d
IEEE802154_FCF_FRAME_PEND	ieee802154.h	43;"	d
IEEE802154_FCF_LEN	ieee802154.h	33;"	d
IEEE802154_FCF_PAN_COMP	ieee802154.h	45;"	d
IEEE802154_FCF_SECURITY_EN	ieee802154.h	42;"	d
IEEE802154_FCF_SRC_ADDR_LONG	ieee802154.h	58;"	d
IEEE802154_FCF_SRC_ADDR_MASK	ieee802154.h	55;"	d
IEEE802154_FCF_SRC_ADDR_SHORT	ieee802154.h	57;"	d
IEEE802154_FCF_SRC_ADDR_VOID	ieee802154.h	56;"	d
IEEE802154_FCF_TYPE_ACK	ieee802154.h	39;"	d
IEEE802154_FCF_TYPE_BEACON	ieee802154.h	37;"	d
IEEE802154_FCF_TYPE_DATA	ieee802154.h	38;"	d
IEEE802154_FCF_TYPE_MACCMD	ieee802154.h	40;"	d
IEEE802154_FCF_TYPE_MASK	ieee802154.h	36;"	d
IEEE802154_FCF_VERS_V0	ieee802154.h	52;"	d
IEEE802154_FCF_VERS_V1	ieee802154.h	53;"	d
IEEE802154_FCS_LEN	ieee802154.h	34;"	d
IEEE802154_H_	ieee802154.h	22;"	d
IEEE802154_MAX_HDR_LEN	ieee802154.h	32;"	d
MODULE_AT86RF233	RF-registers.h	30;"	d
RF	RF.cpp	/^RF::RF() {}$/;"	f	class:RF
RF	RF.h	/^class RF$/;"	c
RFDevice	RF.cpp	/^RF RFDevice = RF();$/;"	v
RF_ACCESS_FB	RF-registers.h	50;"	d
RF_ACCESS_READ	RF-registers.h	52;"	d
RF_ACCESS_REG	RF-registers.h	49;"	d
RF_ACCESS_SRAM	RF-registers.h	51;"	d
RF_ACCESS_WRITE	RF-registers.h	53;"	d
RF_CSMA_SEED_1__AACK_DIS_ACK	RF-registers.h	298;"	d
RF_CSMA_SEED_1__AACK_I_AM_COORD	RF-registers.h	299;"	d
RF_CSMA_SEED_1__AACK_SET_PD	RF-registers.h	297;"	d
RF_CSMA_SEED_1__CSMA_SEED_1	RF-registers.h	300;"	d
RF_DEFAULTS_H_	RF-defaults.h	2;"	d
RF_DEFAULT_ADDR_LONG	RF-defaults.h	18;"	d
RF_DEFAULT_ADDR_SHORT	RF-defaults.h	17;"	d
RF_DEFAULT_CHANNEL	RF-defaults.h	33;"	d
RF_DEFAULT_PANID	RF-defaults.h	42;"	d
RF_DEFAULT_TXPOWER	RF-defaults.h	47;"	d
RF_H_	RF.h	29;"	d
RF_IRQ_STATUS_MASK__AMI	RF-registers.h	167;"	d
RF_IRQ_STATUS_MASK__BAT_LOW	RF-registers.h	165;"	d
RF_IRQ_STATUS_MASK__CCA_ED_DONE	RF-registers.h	168;"	d
RF_IRQ_STATUS_MASK__PLL_LOCK	RF-registers.h	172;"	d
RF_IRQ_STATUS_MASK__PLL_UNLOCK	RF-registers.h	171;"	d
RF_IRQ_STATUS_MASK__RX_START	RF-registers.h	170;"	d
RF_IRQ_STATUS_MASK__TRX_END	RF-registers.h	169;"	d
RF_IRQ_STATUS_MASK__TRX_UR	RF-registers.h	166;"	d
RF_MAX_CHANNEL	RF-defaults.h	32;"	d
RF_MAX_PKT_LENGTH	RF-defaults.h	11;"	d
RF_MIN_CHANNEL	RF-defaults.h	31;"	d
RF_OPT_AUTOACK	RF-defaults.h	67;"	d
RF_OPT_CSMA	RF-defaults.h	68;"	d
RF_OPT_PRELOADING	RF-defaults.h	71;"	d
RF_OPT_PROMISCUOUS	RF-defaults.h	69;"	d
RF_OPT_RAWDUMP	RF-defaults.h	80;"	d
RF_OPT_SRC_ADDR_LONG	RF-defaults.h	82;"	d
RF_OPT_TELL_RX_END	RF-defaults.h	78;"	d
RF_OPT_TELL_RX_START	RF-defaults.h	76;"	d
RF_OPT_TELL_TX_END	RF-defaults.h	74;"	d
RF_OPT_TELL_TX_START	RF-defaults.h	72;"	d
RF_OPT_USE_SRC_PAN	RF-defaults.h	84;"	d
RF_PARTNUM	RF-registers.h	42;"	d
RF_PHY_CC_CCA_DEFAULT__CCA_MODE	RF-registers.h	231;"	d
RF_PHY_CC_CCA_MASK__CCA_MODE	RF-registers.h	228;"	d
RF_PHY_CC_CCA_MASK__CCA_REQUEST	RF-registers.h	227;"	d
RF_PHY_CC_CCA_MASK__CHANNEL	RF-registers.h	229;"	d
RF_PHY_RSSI_MASK__RND_VALUE	RF-registers.h	249;"	d
RF_PHY_RSSI_MASK__RSSI	RF-registers.h	250;"	d
RF_PHY_RSSI_MASK__RX_CRC_VALID	RF-registers.h	248;"	d
RF_PHY_TX_PWR_DEFAULT__PA_BUF_LT	RF-registers.h	239;"	d
RF_PHY_TX_PWR_DEFAULT__PA_LT	RF-registers.h	240;"	d
RF_PHY_TX_PWR_DEFAULT__TX_PWR	RF-registers.h	241;"	d
RF_PHY_TX_PWR_MASK__TX_PWR	RF-registers.h	238;"	d
RF_REGISTERS_H_	RF-registers.h	24;"	d
RF_REG__ANT_DIV	RF-registers.h	72;"	d
RF_REG__BATMON	RF-registers.h	76;"	d
RF_REG__CCA_THRES	RF-registers.h	68;"	d
RF_REG__CC_CTRL_1	RF-registers.h	78;"	d
RF_REG__CSMA_BE	RF-registers.h	106;"	d
RF_REG__CSMA_SEED_0	RF-registers.h	104;"	d
RF_REG__CSMA_SEED_1	RF-registers.h	105;"	d
RF_REG__FTN_CTRL	RF-registers.h	84;"	d
RF_REG__IEEE_ADDR_0	RF-registers.h	95;"	d
RF_REG__IEEE_ADDR_1	RF-registers.h	96;"	d
RF_REG__IEEE_ADDR_2	RF-registers.h	97;"	d
RF_REG__IEEE_ADDR_3	RF-registers.h	98;"	d
RF_REG__IEEE_ADDR_4	RF-registers.h	99;"	d
RF_REG__IEEE_ADDR_5	RF-registers.h	100;"	d
RF_REG__IEEE_ADDR_6	RF-registers.h	101;"	d
RF_REG__IEEE_ADDR_7	RF-registers.h	102;"	d
RF_REG__IRQ_MASK	RF-registers.h	73;"	d
RF_REG__IRQ_STATUS	RF-registers.h	74;"	d
RF_REG__MAN_ID_0	RF-registers.h	89;"	d
RF_REG__MAN_ID_1	RF-registers.h	90;"	d
RF_REG__PAN_ID_0	RF-registers.h	93;"	d
RF_REG__PAN_ID_1	RF-registers.h	94;"	d
RF_REG__PART_NUM	RF-registers.h	87;"	d
RF_REG__PHY_CC_CCA	RF-registers.h	67;"	d
RF_REG__PHY_ED_LEVEL	RF-registers.h	66;"	d
RF_REG__PHY_RSSI	RF-registers.h	65;"	d
RF_REG__PHY_TX_PWR	RF-registers.h	64;"	d
RF_REG__PLL_CF	RF-registers.h	85;"	d
RF_REG__PLL_DCU	RF-registers.h	86;"	d
RF_REG__RF_CTRL_0	RF-registers.h	81;"	d
RF_REG__RX_CTRL	RF-registers.h	69;"	d
RF_REG__RX_SYN	RF-registers.h	79;"	d
RF_REG__SFD_VALUE	RF-registers.h	70;"	d
RF_REG__SHORT_ADDR_0	RF-registers.h	91;"	d
RF_REG__SHORT_ADDR_1	RF-registers.h	92;"	d
RF_REG__TRX_CTRL_0	RF-registers.h	62;"	d
RF_REG__TRX_CTRL_1	RF-registers.h	63;"	d
RF_REG__TRX_CTRL_2	RF-registers.h	71;"	d
RF_REG__TRX_STATE	RF-registers.h	61;"	d
RF_REG__TRX_STATUS	RF-registers.h	60;"	d
RF_REG__TST_CTRL_DIGI	RF-registers.h	107;"	d
RF_REG__VERSION_NUM	RF-registers.h	88;"	d
RF_REG__VREG_CTRL	RF-registers.h	75;"	d
RF_REG__XAH_CTRL_0	RF-registers.h	103;"	d
RF_REG__XAH_CTRL_1	RF-registers.h	83;"	d
RF_REG__XOSC_CTRL	RF-registers.h	77;"	d
RF_RESET_DELAY	RF.h	57;"	d
RF_RESET_PULSE_WIDTH	RF.h	51;"	d
RF_STATE_BUSY_RX_AACK	RF-defaults.h	56;"	d
RF_STATE_BUSY_TX_ARET	RF-defaults.h	57;"	d
RF_STATE_IN_PROGRESS	RF-defaults.h	60;"	d
RF_STATE_PLL_ON	RF-defaults.h	54;"	d
RF_STATE_RX_AACK_ON	RF-defaults.h	58;"	d
RF_STATE_SLEEP	RF-defaults.h	55;"	d
RF_STATE_TRX_OFF	RF-defaults.h	53;"	d
RF_STATE_TX_ARET_ON	RF-defaults.h	59;"	d
RF_TIMING__PLL_ON_TO_BUSY_TX	RF-registers.h	269;"	d
RF_TIMING__RESET	RF-registers.h	270;"	d
RF_TIMING__RESET_TO_TRX_OFF	RF-registers.h	271;"	d
RF_TIMING__SLEEP_TO_TRX_OFF	RF-registers.h	266;"	d
RF_TIMING__TRX_OFF_TO_PLL_ON	RF-registers.h	267;"	d
RF_TIMING__TRX_OFF_TO_RX_ON	RF-registers.h	268;"	d
RF_TIMING__VCC_TO_P_ON	RF-registers.h	265;"	d
RF_TRX_CTRL_0_CLKM_CTRL__16MHz	RF-registers.h	129;"	d
RF_TRX_CTRL_0_CLKM_CTRL__1MHz	RF-registers.h	125;"	d
RF_TRX_CTRL_0_CLKM_CTRL__250kHz	RF-registers.h	130;"	d
RF_TRX_CTRL_0_CLKM_CTRL__2MHz	RF-registers.h	126;"	d
RF_TRX_CTRL_0_CLKM_CTRL__4MHz	RF-registers.h	127;"	d
RF_TRX_CTRL_0_CLKM_CTRL__62_5kHz	RF-registers.h	131;"	d
RF_TRX_CTRL_0_CLKM_CTRL__8MHz	RF-registers.h	128;"	d
RF_TRX_CTRL_0_CLKM_CTRL__OFF	RF-registers.h	124;"	d
RF_TRX_CTRL_0_DEFAULT__CLKM_CTRL	RF-registers.h	122;"	d
RF_TRX_CTRL_0_DEFAULT__CLKM_SHA_SEL	RF-registers.h	121;"	d
RF_TRX_CTRL_0_DEFAULT__PAD_IO	RF-registers.h	119;"	d
RF_TRX_CTRL_0_DEFAULT__PAD_IO_CLKM	RF-registers.h	120;"	d
RF_TRX_CTRL_0_MASK__CLKM_CTRL	RF-registers.h	117;"	d
RF_TRX_CTRL_0_MASK__CLKM_SHA_SEL	RF-registers.h	116;"	d
RF_TRX_CTRL_0_MASK__PAD_IO	RF-registers.h	114;"	d
RF_TRX_CTRL_0_MASK__PAD_IO_CLKM	RF-registers.h	115;"	d
RF_TRX_CTRL_1_MASK__IRQ_2_EXT_EN	RF-registers.h	139;"	d
RF_TRX_CTRL_1_MASK__IRQ_MASK_MODE	RF-registers.h	143;"	d
RF_TRX_CTRL_1_MASK__IRQ_POLARITY	RF-registers.h	144;"	d
RF_TRX_CTRL_1_MASK__PA_EXT_EN	RF-registers.h	138;"	d
RF_TRX_CTRL_1_MASK__RX_BL_CTRL	RF-registers.h	141;"	d
RF_TRX_CTRL_1_MASK__SPI_CMD_MODE	RF-registers.h	142;"	d
RF_TRX_CTRL_1_MASK__TX_AUTO_CRC_ON	RF-registers.h	140;"	d
RF_TRX_CTRL_2_MASK__ALT_SPECTRUM	RF-registers.h	155;"	d
RF_TRX_CTRL_2_MASK__BPSK_OQPSK	RF-registers.h	156;"	d
RF_TRX_CTRL_2_MASK__FREQ_MODE	RF-registers.h	152;"	d
RF_TRX_CTRL_2_MASK__OQPSK_DATA_RATE	RF-registers.h	158;"	d
RF_TRX_CTRL_2_MASK__OQPSK_SCRAM_EN	RF-registers.h	154;"	d
RF_TRX_CTRL_2_MASK__RX_SAFE_MODE	RF-registers.h	151;"	d
RF_TRX_CTRL_2_MASK__SUB_MODE	RF-registers.h	157;"	d
RF_TRX_CTRL_2_MASK__TRX_OFF_AVDD_EN	RF-registers.h	153;"	d
RF_TRX_STATE_MASK__TRAC	RF-registers.h	204;"	d
RF_TRX_STATE__FORCE_PLL_ON	RF-registers.h	209;"	d
RF_TRX_STATE__FORCE_TRX_OFF	RF-registers.h	208;"	d
RF_TRX_STATE__NOP	RF-registers.h	206;"	d
RF_TRX_STATE__PLL_ON	RF-registers.h	212;"	d
RF_TRX_STATE__RX_AACK_ON	RF-registers.h	213;"	d
RF_TRX_STATE__RX_ON	RF-registers.h	210;"	d
RF_TRX_STATE__TRAC_CHANNEL_ACCESS_FAILURE	RF-registers.h	218;"	d
RF_TRX_STATE__TRAC_INVALID	RF-registers.h	220;"	d
RF_TRX_STATE__TRAC_NO_ACK	RF-registers.h	219;"	d
RF_TRX_STATE__TRAC_SUCCESS	RF-registers.h	215;"	d
RF_TRX_STATE__TRAC_SUCCESS_DATA_PENDING	RF-registers.h	216;"	d
RF_TRX_STATE__TRAC_SUCCESS_WAIT_FOR_ACK	RF-registers.h	217;"	d
RF_TRX_STATE__TRX_OFF	RF-registers.h	211;"	d
RF_TRX_STATE__TX_ARET_ON	RF-registers.h	214;"	d
RF_TRX_STATE__TX_START	RF-registers.h	207;"	d
RF_TRX_STATUS_MASK__CCA_DONE	RF-registers.h	179;"	d
RF_TRX_STATUS_MASK__CCA_STATUS	RF-registers.h	180;"	d
RF_TRX_STATUS_MASK__TRX_STATUS	RF-registers.h	181;"	d
RF_TRX_STATUS__BUSY_RX	RF-registers.h	184;"	d
RF_TRX_STATUS__BUSY_RX_AACK	RF-registers.h	190;"	d
RF_TRX_STATUS__BUSY_RX_AACK_NOCLK	RF-registers.h	196;"	d
RF_TRX_STATUS__BUSY_TX	RF-registers.h	185;"	d
RF_TRX_STATUS__BUSY_TX_ARET	RF-registers.h	191;"	d
RF_TRX_STATUS__PLL_ON	RF-registers.h	188;"	d
RF_TRX_STATUS__P_ON	RF-registers.h	183;"	d
RF_TRX_STATUS__RX_AACK_ON	RF-registers.h	192;"	d
RF_TRX_STATUS__RX_AACK_ON_NOCLK	RF-registers.h	195;"	d
RF_TRX_STATUS__RX_ON	RF-registers.h	186;"	d
RF_TRX_STATUS__RX_ON_NOCLK	RF-registers.h	194;"	d
RF_TRX_STATUS__SLEEP	RF-registers.h	189;"	d
RF_TRX_STATUS__STATE_TRANSITION_IN_PROGRESS	RF-registers.h	197;"	d
RF_TRX_STATUS__TRX_OFF	RF-registers.h	187;"	d
RF_TRX_STATUS__TX_ARET_ON	RF-registers.h	193;"	d
RF_WAKEUP_DELAY	RF.h	46;"	d
RF_XAH_CTRL_0__MAX_CSMA_RETRIES	RF-registers.h	279;"	d
RF_XAH_CTRL_0__MAX_FRAME_RETRIES	RF-registers.h	278;"	d
RF_XAH_CTRL_0__SLOTTED_OPERATION	RF-registers.h	280;"	d
RF_XAH_CTRL_1__AACK_ACK_TIME	RF-registers.h	289;"	d
RF_XAH_CTRL_1__AACK_FLTR_RES_FT	RF-registers.h	287;"	d
RF_XAH_CTRL_1__AACK_PROM_MODE	RF-registers.h	290;"	d
RF_XAH_CTRL_1__AACK_UPLD_RES_FT	RF-registers.h	288;"	d
RF_XOSC_CTRL__XTAL_MODE_CRYSTAL	RF-registers.h	257;"	d
RF_XOSC_CTRL__XTAL_MODE_EXTERNAL	RF-registers.h	258;"	d
RX_BUFF_NUM	RF.h	39;"	d
SPI_TYPE	RF.h	41;"	d
USB_PRINT	RF.cpp	30;"	d	file:
_set_state	RF-getset.cpp	/^inline void RF::_set_state(uint8_t state_)$/;"	f	class:RF
addr_long	RF.h	/^    uint8_t addr_long[8];               \/**< the radio's long address *\/$/;"	m	class:RF
addr_short	RF.h	/^    uint8_t addr_short[2];              \/**< the radio's short address *\/$/;"	m	class:RF
assert_awake	RF-internal.cpp	/^void RF::assert_awake()$/;"	f	class:RF
available	RF.cpp	/^int RF::available()$/;"	f	class:RF
cca	RF.cpp	/^bool RF::cca()$/;"	f	class:RF
chan	RF.h	/^    uint8_t chan;                       \/**< currently used channel *\/$/;"	m	class:RF
cs_pin	RF.h	/^    int cs_pin;                         \/**< chip select pin *\/$/;"	m	class:RF
data	RF.h	/^    uint8_t data[127];$/;"	m	struct:radio_buffer
dbm_to_tx_pow	RF-getset.cpp	/^static const uint8_t dbm_to_tx_pow[] = {0x0f, 0x0f, 0x0f, 0x0e, 0x0e, 0x0e,$/;"	v	file:
fb_read	RF-internal.cpp	/^void RF::fb_read(uint8_t *data,$/;"	f	class:RF
force_trx_off	RF-internal.cpp	/^void RF::force_trx_off()$/;"	f	class:RF
frame_len	RF.h	/^    uint8_t frame_len;                  \/**< length of the current TX frame *\/$/;"	m	class:RF
get_addr_long	RF-getset.cpp	/^uint64_t RF::get_addr_long()$/;"	f	class:RF
get_addr_short	RF-getset.cpp	/^uint16_t RF::get_addr_short()$/;"	f	class:RF
get_chan	RF-getset.cpp	/^uint8_t RF::get_chan()$/;"	f	class:RF
get_csma_max_retries	RF-getset.cpp	/^uint8_t RF::get_csma_max_retries()$/;"	f	class:RF
get_max_retries	RF-getset.cpp	/^uint8_t RF::get_max_retries()$/;"	f	class:RF
get_pan	RF-getset.cpp	/^uint16_t RF::get_pan()$/;"	f	class:RF
get_status	RF-internal.cpp	/^uint8_t RF::get_status()$/;"	f	class:RF
get_txpower	RF-getset.cpp	/^int16_t RF::get_txpower()$/;"	f	class:RF
hardware_reset	RF-internal.cpp	/^void RF::hardware_reset()$/;"	f	class:RF
idle_state	RF.h	/^    uint8_t idle_state;                 \/**< state to return to after sending *\/$/;"	m	class:RF
idx	RF.h	/^    uint8_t idx;$/;"	m	struct:radio_buffer
init	RF.cpp	/^int RF::init()$/;"	f	class:RF
int_pin	RF.h	/^    int int_pin;                        \/**< external interrupt pin *\/$/;"	m	class:RF
len	RF.h	/^    uint8_t len;$/;"	m	struct:radio_buffer
next	RF.h	/^    struct radio_buffer *next;$/;"	m	struct:radio_buffer	typeref:struct:radio_buffer::radio_buffer
options	RF.h	/^    uint16_t options;                   \/**< state of used options *\/$/;"	m	class:RF
pan	RF.h	/^    uint16_t pan;                       \/**< currently used PAN ID *\/$/;"	m	class:RF
pop	RF.cpp	/^void RF::pop(radio_buffer_t *rf)$/;"	f	class:RF
put	RF.cpp	/^void RF::put(uint8_t *data, size_t len)$/;"	f	class:RF
radio_buffer	RF.h	/^typedef struct radio_buffer$/;"	s
radio_buffer_t	RF.h	/^} radio_buffer_t;$/;"	t	typeref:struct:radio_buffer
read_data	RF.cpp	/^void RF::read_data(radio_buffer_t *rf)$/;"	f	class:RF
reg_read	RF-internal.cpp	/^uint8_t RF::reg_read(const uint8_t addr)$/;"	f	class:RF
reg_write	RF-internal.cpp	/^void RF::reg_write(const uint8_t addr,$/;"	f	class:RF
reset	RF.cpp	/^void RF::reset()$/;"	f	class:RF
reset_pin	RF.h	/^    int reset_pin;                      \/**< reset pin *\/$/;"	m	class:RF
reset_state_machine	RF-getset.cpp	/^void RF::reset_state_machine()$/;"	f	class:RF
rf_eventHandler	RF.cpp	/^static void rf_eventHandler() {$/;"	f	file:
rf_irq_handler	RF.cpp	/^static void rf_irq_handler()$/;"	f	file:
rf_receive_data	RF.cpp	/^static void rf_receive_data() {$/;"	f	file:
rx_data	RF.h	/^    radio_buffer_t rx_data[RX_BUFF_NUM];$/;"	m	class:RF
rx_len	RF.cpp	/^size_t RF::rx_len()$/;"	f	class:RF
rx_new	RF.h	/^    radio_buffer_t *rx_old, *rx_new;$/;"	m	class:RF
rx_old	RF.h	/^    radio_buffer_t *rx_old, *rx_new;$/;"	m	class:RF
rx_read	RF.cpp	/^void RF::rx_read(uint8_t *data, size_t len, size_t offset)$/;"	f	class:RF
send	RF.cpp	/^size_t RF::send(uint8_t *data, size_t len)$/;"	f	class:RF
seq_nr	RF.h	/^    uint8_t seq_nr;                     \/**< sequence number to use next *\/$/;"	m	class:RF
set_addr_long	RF-getset.cpp	/^void RF::set_addr_long(uint64_t addr)$/;"	f	class:RF
set_addr_short	RF-getset.cpp	/^void RF::set_addr_short(uint16_t addr)$/;"	f	class:RF
set_chan	RF-getset.cpp	/^void RF::set_chan(uint8_t channel)$/;"	f	class:RF
set_csma_backoff_exp	RF-getset.cpp	/^void RF::set_csma_backoff_exp(uint8_t min, uint8_t max)$/;"	f	class:RF
set_csma_max_retries	RF-getset.cpp	/^void RF::set_csma_max_retries(int8_t retries)$/;"	f	class:RF
set_csma_seed	RF-getset.cpp	/^void RF::set_csma_seed(uint8_t entropy[2])$/;"	f	class:RF
set_max_retries	RF-getset.cpp	/^void RF::set_max_retries(uint8_t max)$/;"	f	class:RF
set_option	RF-getset.cpp	/^void RF::set_option(uint16_t option, bool state)$/;"	f	class:RF
set_pan	RF-getset.cpp	/^void RF::set_pan(uint16_t pan_)$/;"	f	class:RF
set_state	RF-getset.cpp	/^void RF::set_state(uint8_t state_)$/;"	f	class:RF
set_txpower	RF-getset.cpp	/^void RF::set_txpower(int16_t txpower)$/;"	f	class:RF
sleep_pin	RF.h	/^    int sleep_pin;                      \/**< sleep pin *\/$/;"	m	class:RF
sram_read	RF-internal.cpp	/^void RF::sram_read(const uint8_t offset,$/;"	f	class:RF
sram_write	RF-internal.cpp	/^void RF::sram_write(const uint8_t offset,$/;"	f	class:RF
state	RF.h	/^    uint8_t state;                      \/**< current state of the radio *\/$/;"	m	class:RF
tx_exec	RF.cpp	/^void RF::tx_exec()$/;"	f	class:RF
tx_load	RF.cpp	/^size_t RF::tx_load(uint8_t *data,$/;"	f	class:RF
tx_pow_to_dbm	RF-getset.cpp	/^static const int16_t tx_pow_to_dbm[] = {4, 4, 3, 3, 2, 2, 1,$/;"	v	file:
tx_prepare	RF.cpp	/^void RF::tx_prepare()$/;"	f	class:RF
